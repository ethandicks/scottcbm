 PROCESSOR 6502

;*************************************
;*                                   *
;* SCOTT ADAMS ADVENTURE INTERPRETER *
;*                                   *
;*  RESUMED 28-AUG-85                *
;*                                   *
;* Ported to dasm 12-Apr-2016
;*                                   *
;*************************************

  .ORG 0

; MACRO DEFINITIONS
;
	MAC	XCOPY
	LDA	FROM+{1},X
	STA	TO+{1},X
	ENDM

 .MAC PRINT
   LDA #<{1}
   LDY #>{1} ;POINT TO TEXT
   JSR STROUT ;PRINT MESSAGE
 .ENDM

 .MAC GOTO
   JMP BL{1}
 .ENDM
;
 .MAC GOSUB
   JSR BL{1}
 .ENDM
;
 .MAC SET
   LDA #$FF
   STA {1}
 .ENDM
;
 .MAC CLEAR
   LDA #0
   STA {1}
 .ENDM
;
 .MAC FLIP
   LDA {1}
   EOR #$FF
   STA {1}
 .ENDM
;
 .MAC BEGIN
BL{2} NOP       ;JUST SAVING THE PLACE
      LDA #$00
BL{1} BIT $FFA9 ;LDA #$FF
      STA F1    ;SET FLAG
 .ENDM
;
 .MAC PLX
   PLA
   TAX
 .ENDM
;
 .MAC PHX
   TXA
   PHA
 .ENDM
;
 .MAC PLY
   PLA
   TAY
 .ENDM
;
 .MAC PHY
   TYA
   PHA
 .ENDM

;
; VARIABLE DEFINITIONS
;
OUTCH = $FFD2 ;PRINT CHR
CR = $D ;CARRAIGE RETURN
SP = $20 ;SPACE
CLS = $93 ;CLR SCREEN CHR
RVSON = 18 ;REVERSE FIELD ON
INDEX1 = $F7 ;INDIRECT INDEX
INDEX2 = $F9 ;INDIRECT INDEX
CGETL = $FFE4 ;GET VECTOR
CINCH = $FFCF ;INPUT LINE WITH CURSOR
 ; OTHER SYSTEM VARIABLES
;;;.OPT LIS
 ;
;;;.OPT NOL
 ;ADVENTURE SHELL
 ;MAIN PROGRAM
 ;
 ; BASED UPON PIRATE ADVENTURE
 ; BY M. SCOTT ADAMS
 ;
 ;NOTE- BLXXX REFERS TO THE BASIC LINENUMBER
 ;
;;;*=$80F
 .SEG prog
 .ORG $080F

 CLEAR $D020
 CLEAR $D021
 LDA #30 ;GRN
 JSR OUTCH
;
BL130 LDA #$E
 JSR OUTCH ;SET LOWER CASE
 PRINT MSGA
 PRINT MSGB
BL160
 JSR CGETL ;WAIT FOR KEY
 BEQ BL160
 CMP #CR
 BNE BL160
BL300
 LDA AR
 STA ROOM ;SET INITIAL ROOM
 LDA LN
 STA LX ;SET TURNS OF LIGHT
 CLEAR DF
 CLEAR SF
 CLEAR SF+1
 CLEAR RANDOM
 LDX ILN
IS000 LDA IL,X ;GET ORIGINAL ROOMS
 STA I2,X ;SAVE FOR RESTORE
 DEX
 BPL IS000
BL310 LDA #CLS
 JSR OUTCH ;CLEAR SCREEN
BL370 GOSUB 550 ;PRINT ROOM
 GOTO 440 ;DO SCAN FOR RANDOM EVENTS
BL380 PRINT PROMPT
 GOSUB 450 ;GET INPUT
 LDA F
 BEQ BL400 ;BRANCH IF VALID SENTENCE
 PRINT DKNOW
 GOTO 380
BL400 GOSUB 710 ;DO SENTENCE SCAN
 LDX #9 ;LIGHT SOURCE
 LDA IL,X ;CHECK PARENT
 BPL BL440
 DEC LX ;DECREMENT TURNS OF LIGHT LEFT
 LDA LX ;CHECK LAMP
 BNE BL430 ;IF ANY LIGHT LEFT, SKIP
 PRINT NLITE ;TELL PLAYER LIGHT IS OUT
 LDX #9 ;LAMP ITEM
 LDA #0 ;LIMBO
 STA IL,X ;MOVE LAMP TO LIMBO
 GOTO 440
BL430 CMP #25 ;25 TURNS OF LIGHT
 BCS BL440 ;YEP
 PRINT ALITE ;PRINT FIRST PART
 LDA LX ;GET TURNS OF LIGHT LEFT
 JSR DPRINT ;PRINT TURNS LEFT
 PRINT BLITE ;PRINT LAST PART
BL440 CLEAR VERB
 GOSUB 710
 GOTO 380
BL450 JSR INPUT
 JSR CRLF
 LDA F
 BEQ BL460
 RTS ;RETURN WITH FLAG SET
;
;SEARCH VERB/NOUN TABLE
;
BL460 LDY #3
VF000 LDX #0 ;RESET TO COMMAND
VF001 LDA VERBS,Y
 AND #$7F ;LOWER CASE ONLY
 CMP COMSTR,X
 BEQ VF003
 LDA VERBS,Y
 BEQ VF004 ;END OF TABLE
VF002 CPX #3 ;CYCLE UNTIL VERB PASSED
 BEQ VF000
 INY
 INX ;MOVE TO NEXT LETTER
 BNE VF002
VF003 INX
 INY ;MOVE TO NEXT LETTER
 CPX #3 ;MATCH ALL 3?
 BNE VF001 ;NOT YET
VF005 DEY
 DEY
 DEY ;POINT TO PREVIOUS VERB
 LDA VERBS+2,Y ;SYNONYM?
 BMI VF005 ;YUP
 LDA THREE,Y ;DIVIDE BY 3
 STA VERB ;SAVE AS VERB NUMBER
 BNE NF000 ;VERB FOUND, GO GET NOUN
VF004
 SET F
 RTS ;RETURN TO PROMPT
NF000 CLEAR F
 LDA COMSTR+4 ;FIRST CHAR IN NOUN
 CMP #SP
 BNE NF001 ;LETTER!
 RTS ;RETURN WITH VERB ONLY
NF001 LDY #3 ;BEGIN WITH 3
NF002 LDX #0
NF003 LDA NOUNS,Y
 AND #$7F
 CMP COMSTR+4,X
 BEQ NF005
 LDA NOUNS,Y
 BEQ NF007 ;END OF LIST
NF004 CPX #3 ;CYCLE UNTIL NOUN PASSED
 BEQ NF002
 INY
 INX ;MOVE TO NEXT LETTER
 BNE NF004
NF005 INX
 INY ;MOVE TO NEXT LETTER
 CPX #3 ;MATCH ALL 3?
 BNE NF003 ;NOT YET
NF006 DEY
 DEY
 DEY ;POINT TO PREVIOUS NOUN
 LDA NOUNS+2,Y ;BACK UP IF SYNONYM
 BMI NF006
 LDA NOUNS,Y
 STA COMSTR+4
 LDA NOUNS+1,Y
 STA COMSTR+5
 LDA NOUNS+2,Y
 STA COMSTR+6 ;MOVE VOCABULARY ENTRY INTO COMMAND LINE
 LDA THREE,Y ;DIVIDE BY 3
 STA NOUN ;SAVE NOUN NUMBER
 CLEAR F
 RTS ;FINISHED
NF007 LDA #1
 STA F ;SET FLAG
 RTS ;FINISHED
BL550 LDA DF ;IS ROOM DARK?
 BEQ BL560 ;NO
 LDX #9 ;TORCH/FLASHLIGHT NUMBER
 LDA IL,X ;WHERE IS ITEM
 CMP #$FF ;IN HAND?
 BEQ BL560 ;YES
 CMP ROOM ;IN ROOM?
 BEQ BL560 ;YES
 PRINT DRKTXT
 RTS
BL560
 SET K
 LDA ROOM ;GET CURRENT ROOM
 ASL ;DOUBLE IT
 TAX ;PUT .A IN .X
 LDA ROOMP,X
 LDY ROOMP+1,X
 STA INDEX1
 STY INDEX1+1 ;POINT TO DECRIPTION
 LDX #0
 LDA (INDEX1,X) ;GET FIRST CHR FROM ROOM TEXT
 CMP #'* ;IS IT A FLAG?
 BNE BL570 ;PRINT NORMAL ROOM
 LDX INDEX1
 LDY INDEX1+1
 INX
 BNE NOCAR1
 INY
NOCAR1 TXA ;PUT .X IN .A
 GOTO 575 ;GO PRINT IT
BL570 PRINT IMTXT
 LDA INDEX1
 LDY INDEX1+1
BL575 JSR STROUT
BL580 LDX #0
BL585 LDA K
 BEQ BL640
 LDA IL,X
 CMP ROOM
 BNE BL640
 PRINT VHERE
 CLEAR K
BL640 LDA IL,X
 CMP ROOM ;IS IT HERE?
 BNE BL670 ;NAH.
;
; INSTALL FORMAT CHECK HERE
;
 TXA
 ASL
 TAY
 LDA ITEMP,Y ;GET LO BYTE
 PHA ;SAVE IT
 LDA ITEMP+1,Y
 TAY ;SET HI BYTE
 PLA ;RESTORE LO BYTE
 JSR STROUT
 LDA #'.
 JSR OUTCH
 LDA #SP
 JSR OUTCH ;PRINT DELIMTER
BL670 INX
 CPX ILN
 BCC BL585
BL680
 JSR RMOVE ;SET ROOM POINTERS
 SET K
 LDX #0 ;CHECK NORTH FIRST
PD000 LDA EXITS,X
 BEQ PD001
 LDY K
 BEQ PD002
 PRINT WAYOUT
 INC K ;SET K TO 0
PD002
 TXA ;GET DIRECTION NUMBER
 ASL ; X 2
 TAY
 LDA DIRS,Y ;GET POINTER TO DIRECTION
 PHA ;SAVE LO BYTE
 LDA DIRS+1,Y
 TAY ;SET HI BYTE
 PLA ;SET LO BYTE
 JSR STROUT
PD001 INX
 CPX #6 ;6 DIECTRIONS
 BCC PD000
 JSR CRLF
 JSR CRLF
 RTS
;
BL710 LDX #$FF
 STX F2
 STX F
 INX
 STX F3
 LDX VERB
 DEX
 BNE BL720
 LDA NOUN
 CMP #7 ;6 DIRECTIONS
 BCS BL720
 GOTO 1190 ;DO MOTION
BL720
 LDA #<SENMAT
 LDY #>SENMAT
 STA INDEX2
 STY INDEX2+1 ;POINT TO NUMBER TABLE
BL725 LDY #0 ;VERB CHECK
 LDA VERB ;0 OR VERB?
 BNE BL730
 LDA (INDEX2),Y
 BEQ BL730
 RTS ;ABORT WHEN RANDOM EVENTS ARE PASSED
BL730 LDA (INDEX2),Y
 CMP VERB ;VERB = VERBS,X?
 BEQ BL740
 GOTO 1630 ;NEXT X
BL740 INY ;POINT TO NOUN
 LDA VERB
 BNE BL790
 STA F ;CLEAR
 LDX RANDOM
 LDA NUMBER,X ;GET NEW RANDOM NUMBER
 JSR RANINC ;GET NEW NUMBER
 CMP (INDEX2),Y ;PERCENTAGE CHANCE
 BCC BL800 ;LET'S DO IT!
 GOTO 1630 ;NEXT X
BL790
 LDA (INDEX2),Y ;GET CURRENT NOUN MASK
 BEQ BL800 ;MATCH ANY
 CMP NOUN
 BEQ BL800 ;MATCH INPUT
 GOTO 1630 ;NEXT X
BL800 CLEAR F
 SET F3
 SET F2
 INY ;POINT TO COMMANDS
BL860 SET F1
 LDA (INDEX2),Y
 STA LL ;SAVE DATA
 INY ;POINT TO INSTRUCTION
 LDA (INDEX2),Y
 DEY ;POINT TO DATA AGAIN
 ASL
 TAX
 LDA TJUMP+1,X
 PHA
 LDA TJUMP,X
 PHA ;SET RETURN ADDRESS
 RTS ;EXECUTE
;
; TESTING FUNCTIONS
;
 BEGIN 900,920
 LDX ILN
BT000 LDA IL,X ;SCAN PARENT TABLE
 BMI BT001 ;FOUND ENTRY
 DEX
 BPL BT000
 FLIP F1
BT001 GOTO 1060
;
 BEGIN 940,1020
 LDX LL
 LDA IL,X
 BMI BT010
 FLIP F1
BT010 GOTO 1060
;
 BEGIN 980,950
 LDX LL
 LDA IL,X
 BMI BL020
 CMP ROOM
 BEQ BL020
 FLIP F1
BL020 GOTO 1060
;
 BEGIN 960,1010
 LDX LL
 LDA IL,X
 CMP ROOM
 BEQ BT030
 FLIP F1
BT030 GOTO 1060
;
 BEGIN 990,970
 LDX LL
 LDA IL,X
 BEQ BT040
 FLIP F1
BT040 GOTO 1060
;
 BEGIN 1000,1030
 LDA LL
 CMP ROOM
 BEQ BT050
 FLIP F1
BT050 GOTO 1060
;
 BEGIN 1040,1050
 LDA LL
 ASL
 TAX
 LDA TWO,X
 AND SF
 BNE BT060
 LDA TWO+1,X
 AND SF+1
 BNE BT060
 FLIP F1
BT060 GOTO 1060
;
BL1060
 LDA F2
 AND F1
 STA F2
 BEQ BL1070
 INY
 INY
 CPY #12 ;FINISHED WITH ALL TESTS?
 BEQ BL1080 ;YUP, EXECUTE!
 JMP BL860 ;NEXT Y
BL1070 GOTO 1630 ;NEXT X
BL1080 CLEAR IP
BL1090 LDA (INDEX2),Y ;GET EXECUTION
 BMI BL1160
 BNE BL1150
 GOTO 1610
BL1150 ASL
 TAX ;GET POINTER
 PHY ;SAVE .Y
 LDA MSGP,X
 LDY MSGP+1,X ;POINT TO MESSAGE
 JSR STROUT ;PRINT IT
 PLY ;RESTORE .Y
 GOTO 1610
BL1160 ASL
 TAX
 DEX ;REFERENCE TO 0
 DEX
 LDA EJUMP,X
 STA JUMP
 LDA EJUMP+1,X
 STA JUMP+1 ;POINT TO ACTION
 JMP (JUMP) ;EXECUTE
;
; EXECUTION ROUTINES
;
BL1190 JSR RMOVE ;POINT TO EXITS
 LDA DF
 STA L ;FIX DARK MOVEMENT FLAG
 BEQ BL1220 ;NOT DARK
 LDX #9 ;LAMP ITEM
 LDA IL,X ;GET PARENT
 CMP #$FF ;HAS HE GOT IT?
 BEQ CL000 ;YUP
 CMP ROOM ;IS IT HERE?
 BEQ CL000 ;YUP
BL1210 PRINT TDARK
 LDA #$FF
 .BYTE $2C ;HIDE NEXT INSTRUCTION
CL000 LDA #0
 STA L ;SET DARKNESS APROPRIATELY
BL1220 LDX NOUN
 BNE BL1230 ;THERE IS A DIRECTION
BL1225 PRINT NDIR
 GOTO 1690
BL1230 DEX ;RANGE FROM 0-5
 CPX #6 ;ONLY 6 DIRECTIONS
 BCS BL1225
 LDA EXITS,X ;GET EXIT
 STA K ;SAVE DIRECTION
 BNE BL1270 ;YES, HE CAN MOVE
 LDA L
 BEQ BL1260
 PRINT BNECK ;FALL DOWN, GO BOOM
 LDA #0
 STA DF ;MAKE ROOM LIGHT AGAIN
 LDA RL ;LIMBO ROOM
 STA K ;SAVE LIMBO
 GOTO 1270
BL1260 PRINT NOWAY
 GOTO 1690
BL1270 LDA L
 BNE BL1280
 LDA #CLS ;CLEAR SCREEN
 JSR OUTCH
BL1280 LDA K
 STA ROOM ;MOVE PLAYER
 GOSUB 550 ;PRINT ROOM
 GOTO 1690
;
BL1290 CLEAR L
 LDX ILN ;CHECK ALL ITEMS
BL1295 LDA IL,X ;CHECK PARENT
 BPL BL1300 ;HE AIN'T GOT IT
 INC L ;ADD ONE TO COUNT
BL1300 DEX
 BPL BL1295 ;REPEAT
 LDA L
 CMP MX ;HOW MANY ITEMS
 BCC BL1320
 PHY ;SAVE .Y
 PRINT TOMUCH ;TOO MANY ITEMS
 PLY ;RESTORE .Y
 GOTO 1610
BL1320
 GOSUB 1700
 TAX ;SET POINTER
 LDA #$FF ;GIVE IT TO HIM
 STA IL,X
 GOTO 1610
;
BL1330 ;DROP ITEM
 GOSUB 1700
 TAX ;SET POINTER
 LDA ROOM
 STA IL,X ;DROP IT
 GOTO 1610
;
BL1340 GOSUB 1700
 STA ROOM ;MOVE HIM
 GOTO 1610
;
BL1350 ;SWAP A AND B
 GOSUB 1700
 STA L
 GOSUB 1700
 TAX
 LDA IL,X ;GET IL(B)
 PHA ;STASH IT
 LDX L
 LDA IL,X ;GET IL(A)
 LDX PD
 STA IL,X ;PUT IN IL(B)
 LDX L
 PLA ;FETCH IT
 STA IL,X ;PUT IN IL(A)
 GOTO 1610
;
BL1360 ;DESTROY ITEM
 GOSUB 1700
 TAX
 LDA #0
 STA IL,X ;DESTROY IT
 GOTO 1610
;
BL1370 ;MAKE IT DARK IN HERE
 LDA #$FF
 STA DF
 GOTO 1610
;
BL1380 ;LET THERE BE LIGHT
 LDA #0
 STA DF
 GOTO 1610
;
BL1390 ;SET BIT
 GOSUB 1700
 ASL
 TAX ;SET POINTER
BL1400 LDA TWO,X
 ORA SF
 STA SF ;SET LO BYTE
 LDA TWO+1,X
 ORA SF+1
 STA SF+1 ;SET HI BYTE
 GOTO 1610
;
BL1410 ;CLEAR BIT
 GOSUB 1700
 ASL
 TAX ;SET POINTER
BL1420 LDA TWO,X
 EOR #$FF ;INVERT
 AND SF
 STA SF ;CLEAR LO BYTE
 LDA TWO+1,X
 EOR #$FF ;INVERT
 AND SF+1
 STA SF+1 ;CLEAR HI BYTE
 GOTO 1610
;
BL1430 ;KILL THE HUMANS
 PRINT DEAD
 LDA RL
 STA ROOM ;MOVE HIM TO LIMBO
 LDA #0
 STA DF ;LET HIM SEE
 GOTO 1470
;
BL1440 ;PUT IL(A) IN B
 GOSUB 1700
 STA L
 GOSUB 1700
 LDX L
 STA IL,X ;MOVE IT
 GOTO 1610
;
BL1450 ;END GAME
 PHY
BL1455 JSR CRLF
 PRINT GOVER
 JSR INPUT
 LDA F
 BNE BL1455
 LDA COMSTR
 CMP #'Y ;DID HE SAY YES?
 BEQ BL1460
 JMP ($A002) ;WARM START BASIC
BL1460 LDX ILN
BL1465 LDA I2,X
 STA IL,X
 DEX
 BPL BL1465
 LDA #CLS
 JSR OUTCH ;CLEAR SCREEN
 PLY
 GOTO 300
;
BL1470 ;PRINT ROOM
 PHY
 GOSUB 550
 PLY
 GOTO 1610
;
BL1480 ;SCORE
 PHY
 CLEAR L
BL1485 LDX ILN
 LDA IL,X
 CMP TT
 BNE BL1490
 TXA
 ASL
 TAY
 LDA ITEMP,Y
 STA INDEX1
 LDA ITEMP+1,Y
 STA INDEX1+1 ;POINT TO ITEM NAME
 LDY #0
 LDA (INDEX1),Y ;GET FIRST CHARACTER
 CMP #'* ;TREASURE FLAG
 BNE BL1490
 INC L ;ADD ONE TO TREASURE COUNT
BL1490 DEX
 BPL BL1485
;
 PRINT ISTRD
 LDA L
 JSR DPRINT
 PRINT TRSRS
 LDX L
 LDA PERCT,X ;GET PERCENT SCORE
 JSR DPRINT ;PRINT SCORE VALUE
 JSR CRLF
;
 LDA L
 CMP TT
 BNE BL1520
 PLY
 GOTO 1450
BL1520 PLY
 GOTO 1610
;
BL1530 ;INVENTORY
 GOTO 1610
;
BL1570 ;SET BIT 0
 LDX #0
 GOTO 1400
;
BL1580 ;CLEAR BIT 0
 LDX #0
 GOTO 1420
;
BL1590 ;MAKE LIGHT
 LDA LN
 STA LX ;SET LIGHT COUNTER
 LDX #9
 LDA #$FF
 STA IL,X ;GIVE HIM THE LIT ONE
 GOTO 1610
;
BL1600 ;CLEAR SCREEN
 LDA #CLS
 JSR OUTCH ;CLEAR IT
;
BL1610 INY
 CPY #$10 ;DONE YET?
 BEQ BL1620 ;YUP
 GOTO 1090 ;FETCH NEXT ACTION
BL1620 LDA VERB
 BNE BL1650 ;ABORT OF SENTENCE COMPLETION
BL1630 CLC
 LDA INDEX2
 ADC #$10 ;MOVE TO NEXT RECORD
 BCC BL1635
 INC INDEX2+1
BL1635 STA INDEX2
 LDY #0
 LDA (INDEX2),Y
 CMP #$FF
 BEQ BL1650
 JSR RANINC ;UPDATE RANDOM COUNTER
 GOTO 725
BL1650 LDA VERB
 BEQ BL1690
 GOSUB 1790
 LDA F
 BEQ BL1680
 PRINT NUNDER
 GOTO 1690
BL1680 LDA F2
 BNE BL1690
 PRINT NOTYET
BL1690 RTS
BL1700 ;GET DATA FOR EXECUTE
 INC IP
 INC IP ;POINT TO NEXT RECORD
 PHY
 LDY IP
 INY ;CHECK OPERAND
 LDA (INDEX2),Y ;GET DATA
 BEQ BL1770 ;FOUND DATA
 PLY
 GOTO 1700 ;REPEAT
BL1770 DEY
 LDA (INDEX2),Y ;FETCH DATA
 STA PD ;STOW IT FOR NOW
 PLY ;FIX Y
 LDA PD ;GET IT BACK
 RTS
;
BL1790 LDA F3
 BNE BL1795
 LDA VERB
 CMP #10 ;VERB GET
 BEQ BL1800
 CMP #18 ;VERB DROP
 BEQ BL1800
BL1795 GOTO 2010
BL1800 LDA NOUN
 BNE BL1810
 PRINT WHAT
 GOTO 1950
BL1810 LDA VERB
 CMP #10 ;VERB GET
 BEQ BL1820
 GOTO 1840 ;TO DROP
BL1820 CLEAR K
 LDX ILN
MI000 LDA IL,X
 BPL MI001
 INC K
MI001 DEX
 BPL MI000
 LDA K
 CMP MX
 BCC BL1840
 PRINT TOMUCH
 GOTO 1950
BL1840 CLEAR K
GI001 LDY #3 ;BEGIN WITH 3
GI002 LDX #0
GI003 LDA GETT,Y
 CMP COMSTR+4,X
 BEQ GI005
 LDA GETT,Y
 BEQ BL1970 ;END OF LIST
GI004 CPX #3 ;CYCLE UNTIL ITEM PASSED
 BEQ GI002
 INY
 INX ;MOVE TO NEXT LETTER
 BNE GI004
GI005 INX
 INY ;MOVE TO NEXT LETTER
 CPX #3 ;MATCH ALL 3?
 BNE GI003 ;NOT YET
 LDX THREE,Y ;DIVIDE BY 3
 DEX
BL1890 LDA VERB
 CMP #10 ;VERB GET
 BEQ BL1920
 LDA IL,X ;HAS HE GOT IT?
 BMI BL1910 ;YUP
 LDA #1
 STA K ;SET K FOR ERROR
 GOTO 1960
BL1910 LDA ROOM
 STA IL,X ;MOVE ITEM TO ROOM
 LDA #3
 STA K ;CLEAR FLAG
 GOTO 1940
BL1920 LDA IL,X
 CMP ROOM ;IS IT HERE?
 BEQ BL1930 ;YUP!
 LDA #2
 STA K ;SET K FOR ERROR
 GOTO 1960
BL1930 LDA #$FF
 STA IL,X ;HAND IT TO HIM
BL1940 PRINT OK
BL1950 CLEAR F
 RTS ;GOTTEN OR DROPPED
BL1960 JMP GI002
BL1970 LDA K
 CMP #1
 BNE BL1980
 PRINT DHAVE
BL1980 LDA K
 CMP #2
 BNE BL1990
 PRINT NHERE
BL1990 LDA K
 BNE BL2000
 LDA F3
 BEQ BL2000
 PRINT CTDO
 CLEAR F
BL2000 LDA K
 BEQ BL2010
 CLEAR F
BL2010 RTS ;ERRED OUT
;
BL2020 ;SAVE GAME
; PUT IN FILE SETUP HERE
 GOTO 1610
  ;
  ; SUBROUTINES AND TABLES
  ;
;
; INPUT
;
INPUT LDX #79 ;EMPTY INPUT BUFFER
 LDA #SP
BUFLOO STA INPBUF,X
 DEX
 BNE BUFLOO
 LDX #7 ;COMMAND BUFFER LENGTH
COMLOO STA COMSTR,X ;EMPTY COMMAND BUFFER
 DEX
 BNE COMLOO
 CLEAR NOUN
;
 LDX #0
INPLOO JSR CINCH ;INPUT CHARACTERS WITH CURSOR
 STA INPBUF,X ;SAVE IN BUFFER
 INX
 CMP #CR
 BNE INPLOO ;TERMINATE ON RETURN
 LDA INPBUF
 CMP #CR ;CHECK FIRST CHARACTER
 BNE INPEND
 LDX #0
 STX INPBUF
 DEX
 STX F ;SET FLAG
 RTS ;REPRINT PROMPT
INPEND LDA #0
 STA INPBUF-1,X ;END STRING WITH NULL
 LDA INPBUF
 CMP #SP
 BNE VGET
 LDY #$FF
 LDX #$FF
SPLOO1 INX
 LDA INPBUF,X
 CMP #SP
 BEQ SPLOO1
MOVLOO INX
 INY
 LDA INPBUF-1,X
 STA INPBUF,Y ;MOVE BUFFER DOWN
 CMP #0 ;END OF SENTENCE?
 BNE MOVLOO
VGET LDX #3 ;MOVE FIRST THREE CHARS
VLOOP LDA INPBUF-1,X
 STA COMSTR-1,X
 DEX
 BNE VLOOP
 LDA #SP
 STA COMSTR+3 ;PUT A SPACE BETWEEN WORDS
 LDX #0
 LDY #0
SPLOO2 INX
NSPLOO LDA INPBUF-1,X
 BEQ NEND
 CMP #SP
 BNE SPLOO2
 INX
 LDA INPBUF-1,X
 CMP #SP
 BEQ NSPLOO
NLOO LDA INPBUF-1,X
 STA COMSTR+4,Y
 BEQ NEND
 INY
 INX
 CPY #3
 BNE NLOO
NEND LDA #0
 STA F ;CLEAR FLAG
 RTS
;
RMOVE ;PUT DIRECTIONS IN TABLE
 LDX ROOM
 LDA RNORT,X
 STA EXITS
 LDA RSOUT,X
 STA EXITS+1
 LDA REAST,X
 STA EXITS+2
 LDA RWEST,X
 STA EXITS+3
 LDA RUP,X
 STA EXITS+4
 LDA RDOWN,X
 STA EXITS+5
 RTS
;
RANINC INC RANDOM ;BUMP RANDOM POINTER
 PHA
 LDA RANDOM
 CMP #100 ;ONLY 100 ENTRIES
 BCC RI000 ;UNDERFLOW
 LDA #0
 STA RANDOM ;RESET POINTER
RI000 PLA ;RESTORE .A
 RTS
 ;
 ; SYSTEM MESSAGES
 ; (SAME FOR ALL ADVENTURES)
 ;
;
; OPENING TEXT
;
MSGA .BYTE CLS,"          ",RVSON
 .BYTE $D7,$C5,$CC,$C3,$CF,$CD,$C5,SP,$D4,$CF,SP
 .BYTE $C1,$C4,$D6,$C5,$CE,$D4,$D6,$D2,$C5,CR,CR
 .BYTE "   ",$D4,"HE OBJECT OF YOUR ADVENTURE IS TO",CR
 .BYTE "FIND TREASURES AND RETURN THEM TO THEIR",CR
 .BYTE "PROPER PLACE.",CR,CR
 .BYTE "   ",$C9,$27,"M YOUR GUIDE. ",$C7,"IVE ME COMMANDS THAT"
 .BYTE "CONSIST OF A VERB AND A NOUN.",CR,CR
 .BYTE "I.E., GO EAST, TAKE KEY, CLIMB TREE,",CR
 .BYTE "SAVE GAME, TAKE INVE",$00
MSGB
 .BYTE "NTORY.",CR,CR
 .BYTE "   ",$D9,"OU",$27,"LL NEED SPECIAL ITEMS TO DO SOME",CR
 .BYTE "THINGS, BUT ",$C9,$27,"M SURE YOU",$27,"LL BE A GOOD",CR
 .BYTE "ADVENTURER AND FIGURE THESE THINGS OUT.",CR,CR,CR,CR,CR
 .BYTE "            ",$C8,"APPY ADVENTURING!",CR,CR
 .BYTE "     ",$C8,"IT ANY KEY TO BEGIN "
 .BYTE $C1,$C4,$D6,$C5,$CE,$D4,$D6,$D2,$C5,$00
;
; UTILITY SUBROUTINES
;
STROUT ;STRING PRINT ROUTINE
 STA PRTLOO+1
 STY PRTLOO+2
 LDY #0
PRTLOO
 LDA $FFFF,Y
 BEQ STREND
 JSR OUTCH
 INY
 BNE PRTLOO
STREND RTS ;END STROUT
;
CRLF ;PRINT CARRIAGE RETURN
 LDA #CR ;LOAD A WITH CRLF
 JMP OUTCH ;PRINT IT AND RETURN
;
NPRINT SEC
 .BYTE $24 ;BIT $XX
DPRINT CLC
 PHP ;SAVE CARRY
 STA INTGER
 PLP
 BCC IP000
 LDA INTGER
 BPL IP001
 EOR #%11111111
 STA INTGER
 INC INTGER ;INT=-INT
IP001 LDA #'- ;MINUS SIGN
 .BYTE $2C ;BIT $XXXX
IP000 LDA #SP
 STA STRING ;SET SIGN CHAR
 PHX
 LDX #1
 LDA #'0
IP002 STA STRING,X ;CLEAR STRING
 INX
 CPX #4
 BNE IP002
 LDA #0
 STA STRING,X ;SET END OF STRING
 LDX #0
 LDA INTGER ;GET NUMBER BACK
IP003 CMP TEN,X
 BCC IP004 ;UNDERFLOW
 INC STRING+1,X
 SEC
 SBC TEN,X ;BUMP DOWN
 JMP IP003
IP004 INX
 CPX #3 ;DONE ALL POWERS OF 10?
 BNE IP003 ;NOT YET
 LDX #0
IP005 INX
 CPX #3 ;LAST DIGIT?
 BEQ IP007
 LDA STRING,X
 CMP #'0 ;LOOK FOR '0'
 BEQ IP005 ;STILL GOT'EM
IP007 DEX ;POINT TO CHR BEFORE FIRST NON-ZERO
 LDA STRING ;GET SIGN CHR
 STA STRING,X ;PUT IN NEW PLACE
 STX INTGER ;SAVE NUMBER OF PLACES MOVED
 PHY
 LDA #<STRING
 LDY #>STRING ;POINT TO STRING
 CLC
 ADC INTGER ;ADD OFFSET
 BCC IP006
 INY
IP006 JSR STROUT
 PLY
 PLX
;
 RTS
;
; DIRECTIONS
;
DIRS .WORD NORTH,SOUTH,EAST,WEST,UP,DOWN
NORTH .BYTE "NORTH ",$0
SOUTH .BYTE "SOUTH ",$0
EAST  .BYTE "EAST ",$0
WEST  .BYTE "WEST ",$0
UP    .BYTE "UP ",$0
DOWN  .BYTE "DOWN ",$0
;
; ERROR MESSAGES
;
PROMPT .BYTE $8D,$11,$D7,"HAT NOW? ",$00
IMTXT  .BYTE $C9,$27,$CD,$20,$C9,$CE,$20,$C1,$20,0
DRKTXT .BYTE $C9,"T'S TOO DARK TO SEE.",0
NLITE  .BYTE $CC,"IGHT HAS RUN OUT!",0
ALITE  .BYTE $CC,"IGHT RUNS OUT IN ",0
BLITE  .BYTE " TURNS.",CR,0
DKNOW  .BYTE $D9,"OU USE WORDS ",$C9," DON'T KNOW.",CR,0
NDIR   .BYTE $8D,$C7,"IVE ME A DIRECTION TOO.",CR,0
TDARK  .BYTE $C9,"T'S DANGEROUS IN THE DARK.",CR,0
BNECK  .BYTE $C9," FELL DOWN AND BROKE MY NECK.",0
NOWAY  .BYTE $C9," CAN'T GO IN THAT DIRECTION!",0
NUNDER .BYTE $C9," DON'T UNDERSTAND YOUR COMMAND.",CR,0
NOTYET .BYTE $C9," CAN'T DO THAT...YET.",CR,0
OK     .BYTE "OK, ",CR,CR,0
WHAT   .BYTE "WHAT?",CR,0
TOMUCH .BYTE $C9,"'VE TOO MUCH TO CARRY!",CR,0
DHAVE  .BYTE $C9,"'M NOT CARRYING IT!",CR,0
NHERE  .BYTE $C9," DON'T SEE IT HERE.",CR,0
CTDO   .BYTE $C9,"T'S BEYOND BY POWER TO DO THAT.",CR,0
DEAD ;HE DOOD IT
       .BYTE $C9,"'M DEAD.",CR,0
WAYOUT .BYTE $8D,$CF,$C2,$D6,$C9,$CF,$D5,$D3
       .BYTE $20,$C5,$D8,$C9,$D4,$D3,$3A,$8D
       .BYTE $00
VHERE  .BYTE $8D,$11,$D6,$C9,$D3,$C9,$C2,$CC
       .BYTE $C5,$20,$C9,$D4,$C5,$CD,$D3,$20
       .BYTE $C8,$C5,$D2,$C5,$3A,$20,$8D,$00
GOVER  .BYTE CR,$D4,"HE GAME IS NOW OVER.-",$C1,"NOTHER GAME? ",0
ISTRD  .BYTE $C9,"'VE STORED",0
TRSRS  .BYTE "TREASURES. ",$CF,"ON A SCALE"
       .BYTE CR,"OF 0 TO 100 THAT RATES A",CR,0
DONE   .BYTE $D7,$C5,$CC,$CC,$20,$C4,$CF,$CE,$C5,CR,0
;
; CALCULATION TABLES
;
THREE ;DIVIDE BY 3 TABLE (0-192)
  .BYTE  0, 0, 0, 1, 1, 1, 2, 2
  .BYTE  2, 3, 3, 3, 4, 4, 4, 5
  .BYTE  5, 5, 6, 6, 6, 7, 7, 7
  .BYTE  8, 8, 8, 9, 9, 9,10,10
  .BYTE 10,11,11,11,12,12,12,13
  .BYTE 13,13,14,14,14,15,15,15
  .BYTE 16,16,16,17,17,17,18,18
  .BYTE 18,19,19,19,20,20,20,21
  .BYTE 21,21,22,22,22,23,23,23
  .BYTE 24,24,24,25,25,25,26,26
  .BYTE 26,27,27,27,28,28,28,29
  .BYTE 29,29,30,30,30,31,31,31
  .BYTE 32,32,32,33,33,33,34,34
  .BYTE 34,35,35,35,36,36,36,37
  .BYTE 37,37,38,38,38,39,39,39
  .BYTE 40,40,40,41,41,41,42,42
  .BYTE 42,43,43,43,44,44,44,45
  .BYTE 45,45,46,46,46,47,47,47
  .BYTE 48,48,48,49,49,49,50,50
  .BYTE 50,51,51,51,52,52,52,53
  .BYTE 53,53,54,54,54,55,55,55
  .BYTE 56,56,56,57,57,57,58,58
  .BYTE 58,59,59,59,60,60,60,61
  .BYTE 61,61,62,62,62,63,63,63
 ;
TWO ;POWERS OF TWO
 .HEX 0001 0002 0004 0008
 .HEX 0010 0020 0040 0080
 .HEX 0100 0200 0400 0800
 .HEX 1000 2000 4000 8000
;
TEN ;POWERS OF TEN
  .BYTE 100,10,1
;
TJUMP ;JUMP TABLE FOR TESTING FUNCTIONS
 .WORD BL1060-1 ;NULL OPERATION
 .WORD BL940,BL960,BL980,BL1000
 .WORD BL1010,BL1020,BL1030,BL1040
 .WORD BL1050,BL900,BL920,BL950
 .WORD BL970,BL990
;
EJUMP ;JUMP TABLE FOR EXECUTION FUNCTIONS
 .WORD BL1290,BL1330,BL1340,BL1360
 .WORD BL1370,BL1380,BL1390,BL1360
 .WORD BL1410,BL1430,BL1440,BL1450
 .WORD BL1470,BL1480,BL1530,BL1570
 .WORD BL1580,BL1590,BL1600,BL2020
 .WORD BL1350
;
NUMBER
 .BYTE 47,19,9,82,64,50,27,75,40,22
 .BYTE 32,8,62,39,51,70,18,25,31,85
 .BYTE 41,96,49,88,17,80,61,2,34,15
 .BYTE 69,94,43,77,83,7,30,26,60,66
 .BYTE 44,67,52,74,1,28,53,13,72,86
 .BYTE 5,97,48,12,24,14,79,71,46,45
 .BYTE 0,55,89,16,91,98,54,73,63,95
 .BYTE 33,93,35,3,68,21,65,37,56,57
 .BYTE 92,20,87,4,11,90,23,76,59,38
 .BYTE 36,58,81,6,42,10,84,78,29,99

 ;
 ; THIS SECTION OF DATA
 ; MUST BE CUSTOM MADE
 ; FOR EACH PROGRAM
 ;
;;;.LIB PIR.DAT
;*=$4000 ;BEGINNING OF DATA
  SEG.U gamedata
  ORG $4000

ROOMP  DS.B $78  ;POINTERS TO ROOM TEXT
ITEMP  DS.B $88  ;POINTERS TO ITEMS
MSGP   DS.B $100 ;POINTERS TO MESSAGES
RNORT  DS.B $40  ;NORTH ROOMS
RSOUT  DS.B $40  ;SOUTH ROOMS
REAST  DS.B $40  ;EAST ROOMS
RWEST  DS.B $40  ;WEST ROOMS
RUP    DS.B $40  ;UP ROOMS
RDOWN  DS.B $40  ;DOWN ROOMS
VERBS  DS.B $100 ;LIST OF VERBS
NOUNS  DS.B $100 ;LIST OF NOUNS
GETT   DS.B $100 ;LIST OF LIFTABLE OBJECTS
SENMAT DS.B $B00 ;SENTENCE MATRIX
ITEMT  DS.B $580 ;TEXT OF ITEMS
ROOMT  DS.B $600 ;TEXT OF ROOMS
MESGT  DS.B $900 ;MESSAGE TEXT
IL     DS.B $50  ;ITEM TABLE
PERCT  DS.B 20   ;SCORE TABLE FOR TREASURES
;
MX     DS.B 1 ;MAXIMUM ITEM NUMBER
LN     DS.B 1 ;INITIAL TURNS OF LIGHT
TT     DS.B 1 ;NUMBER OF TREASURES
RL     DS.B 1 ;LIMBO ROOM
AR     DS.B 1 ;STARTING ROOM
ILN    DS.B 1 ;NUMBER OF ITEMS-1
TR     DS.B 1 ;STORAGE ROOM FOR TREASURES

;
;  LIST OF SYSTEM VARIABLES
;
INPBUF DS.B $50
COMSTR DS.B 8
JUMP   DS.B 2 ;INDIRECT JUMP LOCATION
VERB   DS.B 1 ;CURRENT VERB NUMBER
NOUN   DS.B 1 ;CURRENT NOUN NUMBER
SF     DS.B 2
L      DS.B 1 ;DARK MOVEMENT FLAG
ROOM   DS.B 1 ;CURRENT ROOM NUMBER
DF     DS.B 1 ;$FF = DARK $00 = LIGHT
LX     DS.B 1 ;TURNS OF LIGHT LEFT
EXITS  DS.B 6 ;EXITS FROM CURRENT ROOM
K      DS.B 1 ;GENERAL PURPOSE FLAG
F      DS.B 1
F1     DS.B 1
F2     DS.B 1
F3     DS.B 1 ;OPERATION FLAGS
LL     DS.B 1 ;TESTING FUNCTION DATA
IP     DS.B 1 ;DATA POINTER
PD     DS.B 1 ;EXECUTION FUNCTION DATA
RANDOM DS.B 1 ;RANDOM NUMBER POINTER
I2     DS.B $50 ;ORIGINAL ROOM MATRIX SAVED
STRING DS.B 5 ;STRING BUFFER
INTGER DS.B 1 ;PLACE TO KEEP NUMBER

;.OPT LIS
;.END
